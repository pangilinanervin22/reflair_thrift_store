// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  name     String
  city     String  @default("Bacoor")
  barangay String?
  address  String?
  contact  String?
  role     String  @default("customer")
  //  many to one order >-< account
  order    Order[]
  //  one to one account >-< cart
  cart     Cart?
}

model Product {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Float
  image    String
  size     String
  category String
  color    String
  material String
  tags     String[]
  status   ProductStatus @default(available)
  order_id String?       @db.ObjectId
  order    Order?        @relation(fields: [order_id], references: [id])
  cart_id  String[]      @db.ObjectId
  Cart     Cart[]        @relation(fields: [cart_id], references: [id])
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  order_date   DateTime    @default(now())
  ship_date    DateTime?
  order_status OrderStatus @default(pending)
  //  many to one order >-< account
  user_id      String      @unique @db.ObjectId
  user         Account     @relation(fields: [user_id], references: [id])
  // many to many order >-< account (cart)
  product      Product[]
}

model Cart {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  product_id String[]  @db.ObjectId
  product    Product[] @relation(fields: [product_id], references: [id])
  // one to one account >-< cart
  account_id String    @unique @db.ObjectId
  account    Account   @relation(fields: [account_id], references: [id])
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  canceled
}

enum Role {
  admin
  customer
}

enum ProductStatus {
  available
  unavailable
}
